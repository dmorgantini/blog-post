This is the third part of a multi-part series of blog posts on Micro-services.  There seems to be alot of ambiguity amongst the community around what these things are, when they should be used and how to approach them.  This blog series is basically a regurgitation of 5 years of building and learning about micro-services.  I imagine that not everybody will agree with everything I say here, but I hope that there is nothing so controversial as to cause serious disagreements. 

2. The axis of Microservices

So, you've read about these things called Microservices. And they sound pretty interesting to you.  How do you decide whether or not you should use Microservices on your project or whether or not you should choose a different architecture?  In this section, I'm going to outline what Duncan Cragg, another colleague of mine, and I discussed as 'axioms' of Microservices.  Ie: reasons for which you should consider having a microservice.  If, after reading this, you decide that the system you are building could use a microservice or two, then, well, apparently you need to use a micro-service architecture.  I personally would think that you could build a monolithic app that relies, for various bits of cross cutting business functionality, on several microservices.  Wait, though, you're thinking to yourself, shouldn't you either use microservices or not?  Well, I shrug in response.  It's your system, the key concepts are 'maintainability' and 'cost'.  As I mentioned earlier, there is a cost to every microservice you create.  There are no hard and fast rules, but making judgement calls is part of the game.

So, the following are some reasons why you might choose to create a microservice.

a) Differing Persistence Needs

This is an extremely compelling reason to create a microservice.  Often times in 'Architectures of Old'(TM) regardless of suitability of a given data storage technology, we would use the 'Golden Hammer' regardless.  The ubiquity of SQL backed relational Databases often meant that it became the data storage technology even when the data stored wasn't terribly relational.  The idea that Microservices brings to this discussion is that each microservice can be backed by a different data storage technology.  Dealing with a rich domain? Consider a microservice backed by a Document Database, and if you need to do reporting on that domain, then consider another microservice backed by a relational database.

b) Rates of churn

Microservices also provide a good separation if you need to be able to deal with differing rates of churn.  Consider an application with large amounts of integration work required.  Integration, as we know, is complex and challenging, especially if it's done with 3rd parties that are out of your control.  Change, and the associated risk of breaking integration partners, is something that is desirable to reduce.  On the flip side, your look and feel might be something that you want to be able to change rapidly.  Decoupling these two pieces of functionality, via microservices might be considered a very good idea.

c) Splitting Teams/Team Skills

Scaling a team can be quite challenging, especially in a complex system.  Splitting a system, via micro-services can be an effective way to provide additional scalability.  The complex aspects of the system can be hidden behind various well defined interfaces and allow less experienced (in the domain) developers to provide value without necessarily understanding the complexity behind the interface.

d) Differing Scaling Profiles

Different parts of the system might require differing amounts of scaling.  The CQRS architecture pattern(1) is a good example of this concept.  Writing and reading from a system often having different scaling requirements.  It's very rare that there is an equivalent amount of reads and writes within a system and it would be nice to be able to scale the reads up independently from the writes.  Using micro-services allows you to do this across various aspects of your system and gives you alot more flexibility in terms of scaling.

e) Security Zoning

In 'Architectures of Old'(TM), the security architects insisted on a layered approach to building a system.  Essentially, they wanted to avoid the risk of having important code running on the web layer.  Micro-services can provide zoning that is analogous to the traditional layered approach.  Business logic and critical data storage can be separated from the services that provide html rendering.  Communication between the individual micro-services can be firewalled, encrypted, etc until the security architects are happy. 

f) Isolating Legacy Functionality

Large legacy systems, especially if the original developers have moved on, can be very difficult to change or add functionality.  Given this, new functionality can be added to the system by adding micro-services. This article does a very good job of illustrating the concept.(2)

g) The Unknown

Finally, micro-services allow you the ability to isolate the unknown.  If one were to ask me how I defined a 'Agile' architecture, I'd say one that allows the maximum amout of flexibility and provides the ability to responsibly differ decisions for as long as possible.  Micro-services provide this ability.  They allow you to defer the difficult decisions around databases until it's absolutely required.  If the only thing that a service provides is a thin, domain aware(3) wrapping over some datastore, the most important thing to get right(4) is the interface with which your other services interact.  This means that initially and for quite a while during the development process, an in memory datastore would allow you to prove alot of the more interesting/difficult architectural principles.  Fundamentally, micro-services provide you with the tools that a team needs to responsibly defer the decisions that make an architecture more difficult to maintain and change with changing requirements.

It's tempting at this point to conclude that Micro-services are finally that silver bullet that will solve all of our architectural needs.  Unfortunately, like all tools there are costs to using Micro-services.  The next section of this series will talk about Pragmatic micro-services, it cover the costs of micro-services and how, using some pragmatic decision making we can mitigate these costs.  Regardless of any mitigations, it IS possible to over engineer your system using micro-services.  You know what they say, with great power comes great responsibility and fear leads to the dark side. or something like that.

(1) link to CQRS
(2) link to other micro-service blog
(3) see REST and Micro-services
(4) to some definition of right